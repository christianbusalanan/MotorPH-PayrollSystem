@startuml MotorPH_Simplified_Class_Diagram

!theme plain
skinparam classAttributeIconSize 0
skinparam classFontSize 10
skinparam packageStyle rectangle

' Define colors for different layers
skinparam class {
    BackgroundColor<<Model>> LightBlue
    BackgroundColor<<DAO>> LightGreen
    BackgroundColor<<Service>> LightYellow
    BackgroundColor<<Controller>> LightCoral
    BackgroundColor<<GUI>> LightPink
}

package "Model Layer" {
    class User <<Model>> {
        -String id
        -String username
        -String password
        -String role
        +authenticateUser() User
    }

    class Employee <<Model>> {
        -String employeeId
        -String firstName
        -String lastName
        -String position
        -double basicSalary
        -double hourlyRate
        +getFullName() String
        +calculateHourlyRate() double
    }

    class LeaveRequest <<Model>> {
        -String id
        -String employeeId
        -String leaveType
        -LocalDate startDate
        -LocalDate endDate
        -String status
    }

    class Payroll <<Model>> {
        -String payrollId
        -String employeeId
        -LocalDate periodStart
        -LocalDate periodEnd
        -double workingHours
        -double grossIncome
        -double totalDeductions
        -double netSalary
        +calculateNetSalary() double
    }
}

package "Data Access Layer" {
    class UserDAO <<DAO>> {
        +authenticateUser(String, String) User
        +createUser(User) boolean
        +deleteUser(String) boolean
    }

    class EmployeeDAO <<DAO>> {
        +getAllEmployees() List<Employee>
        +getEmployeeById(String) Employee
        +getEmployeeByUsername(String) Employee
        +createEmployee(Employee) boolean
        +updateEmployee(Employee) boolean
        +deleteEmployee(String) boolean
    }

    class PayrollDAO <<DAO>> {
        +getAllPayrolls() List<Payroll>
        +getPayrollsByEmployeeId(String) List<Payroll>
        +createPayroll(Payroll) boolean
    }

    class LeaveRequestDAO <<DAO>> {
        +getAllLeaveRequests() List<LeaveRequest>
        +getLeaveRequestsByEmployeeId(String) List<LeaveRequest>
        +createLeaveRequest(LeaveRequest) boolean
        +updateLeaveRequestStatus(String, String) boolean
    }
}

package "Service Layer" {
    class AuthenticationService <<Service>> {
        -UserDAO userDAO
        +authenticateUser(String, String) User
        +isValidRole(String) boolean
    }

    class EmployeeService <<Service>> {
        -EmployeeDAO employeeDAO
        -UserDAO userDAO
        +getAllEmployees() List<Employee>
        +getEmployeeById(String) Employee
        +getEmployeeByUsername(String) Employee
        +createEmployee(Employee, String, String) boolean
        +updateEmployee(Employee) boolean
        +deleteEmployee(String) boolean
    }

    class PayrollService <<Service>> {
        -PayrollDAO payrollDAO
        +getAllPayrolls() List<Payroll>
        +calculatePayroll(String, LocalDate, LocalDate) Payroll
        +processPayroll(Payroll) boolean
    }

    class LeaveRequestService <<Service>> {
        -LeaveRequestDAO leaveRequestDAO
        +getAllLeaveRequests() List<LeaveRequest>
        +submitLeaveRequest(String, String, LocalDate, LocalDate) boolean
        +updateLeaveRequestStatus(String, String) boolean
    }
}

package "Controller Layer" {
    class LoginController <<Controller>> {
        -AuthenticationService authService
        +handleLogin(String, String, JFrame) void
    }
}

package "Presentation Layer" {
    class LoginForm <<GUI>> {
        -LoginController loginController
        +handleLogin() void
    }

    class HRManagerDB <<GUI>> {
        -EmployeeService employeeService
        -LeaveRequestService leaveRequestService
        +loadEmployeeData() void
        +manageEmployees() void
        +manageLeaveRequests() void
    }

    class EmployeeDB <<GUI>> {
        -EmployeeService employeeService
        -PayrollService payrollService
        -LeaveRequestService leaveRequestService
        +viewEmployeeDetails() void
        +viewPayroll() void
        +requestLeave() void
    }

    class PayrollStaffDB <<GUI>> {
        -PayrollService payrollService
        -EmployeeService employeeService
        +processPayroll() void
        +calculateSalary() void
        +viewEmployees() void
    }
}

' Core Model Relationships
User ||--|| Employee : "1:1"
Employee ||--o{ LeaveRequest : "1:many"
Employee ||--o{ Payroll : "1:many"

' Service Dependencies
AuthenticationService --> UserDAO : uses
EmployeeService --> EmployeeDAO : uses
EmployeeService --> UserDAO : uses
PayrollService --> PayrollDAO : uses
LeaveRequestService --> LeaveRequestDAO : uses

' Controller Dependencies
LoginController --> AuthenticationService : uses

' GUI Dependencies
LoginForm --> LoginController : uses
HRManagerDB --> EmployeeService : uses
HRManagerDB --> LeaveRequestService : uses
EmployeeDB --> EmployeeService : uses
EmployeeDB --> PayrollService : uses
EmployeeDB --> LeaveRequestService : uses
PayrollStaffDB --> PayrollService : uses
PayrollStaffDB --> EmployeeService : uses

' GUI Navigation Flow
LoginForm --> HRManagerDB : "HR Manager"
LoginForm --> EmployeeDB : "Employee"
LoginForm --> PayrollStaffDB : "Payroll Staff"

' DAO to Model relationships
UserDAO ..> User : creates
EmployeeDAO ..> Employee : creates
PayrollDAO ..> Payroll : creates
LeaveRequestDAO ..> LeaveRequest : creates

note top of User : "Normalized database design:\nUser and Employee are separate\ntables with 1:1 relationship"

note bottom of EmployeeService : "Handles both User and Employee\ntable operations for complete\nemployee management"

note right of LoginController : "Routes users to appropriate\ndashboard based on role"

@enduml